// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FlashcardSet {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], map: "flashcard_set_user_id_foreign")

  Flashcard Flashcard[]

  @@map("flashcard_set")
}

model Flashcard {
  id             String       @id @default(uuid()) @db.Uuid
  header         String
  front          String
  back           String
  flashcardSetId String       @map("flashcard_set_id") @db.Uuid
  FlashcardSet   FlashcardSet @relation(fields: [flashcardSetId], references: [id], map: "flashcard_flashcard_set_id_foreign")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], map: "flashcard_user_id_foreign")


  @@map("flashcard")
}

model Question {
  id        String   @id @default(uuid()) @db.Uuid
  data      String
  Answer    Answer[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], map: "question_user_id_foreign")

  @@map("question")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  username  String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  scope     String[]

  Answer       Answer[]
  Note         Note[]
  Question     Question[]
  Flashcard    Flashcard[]
  FlashcardSet FlashcardSet[]
  Logins       Logins[]
  @@map("user")
}

model Answer {
  id         String   @id @default(uuid()) @db.Uuid
  questionId String   @map("question_id") @db.Uuid
  data       String
  question   Question @relation(fields: [questionId], references: [id], map: "answer_question_id_foreign")
  userId     String   @map("user_id") @db.Uuid
  user       User     @relation(fields: [userId], references: [id], map: "answer_user_id_foreign")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("answer")
}

model Note {
  id      String @id @default(uuid()) @db.Uuid
  header  String
  details String
  userId  String @map("user_id") @db.Uuid
  user    User   @relation(fields: [userId], references: [id], map: "note_user_id_foreign")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("note")
}

model Logins {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], map: "logins_user_id_foreign")

  @@map("logins")
}
